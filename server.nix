{ pkgs, hostname, lib, ... }: {
  # Base server hardening/services (non-WSL)
   
   # Include the hardware configuration if present in this repo (on the target host it will exist)
   imports = (
     if builtins.pathExists ./hardware/${hostname}/hardware-configuration.nix then
       [ ./hardware/${hostname}/hardware-configuration.nix ]
     else
       []
   );

  # Bootloader: systemd-boot (UEFI)
  # Lanzaboote currently replaces the systemd-boot module.
  # This setting is usually set to true in configuration.nix
  # generated at installation time. So we force it to false
  # for now.
  boot.loader.systemd-boot.enable = lib.mkForce false;
  boot.loader.efi = {
    canTouchEfiVariables = true;
    # Set if needed: efiSysMountPoint = "/boot" (default) or "/boot/efi".
  };

  # Secure Boot (lanzaboote + sbctl)
  boot.lanzaboote = {
    enable = true;
    pkiBundle = "/var/lib/sbctl"; # Directory containing PK/KEK/db/dbx keys generated by sbctl
  };
  # Create directory for Secure Boot keys (owned by root, not world-readable)
  systemd.tmpfiles.rules = [ "d /var/lib/sbctl 0700 root root -" ];
  # Key management tool (sbctl) added later together with krdp

  # Use latest kernel.
  boot.kernelPackages = pkgs.linuxPackages_latest;

  networking.hostName = hostname;
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Enable networking
  networking.networkmanager.enable = true;
  
  # Configure keymap in X11
  services.xserver.xkb = {
    layout = "it";
    variant = "";
  };

  # Configure console keymap
  console.keyMap = "it2";

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound with pipewire.
  services.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;

    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.xserver.libinput.enable = true;


  # Firewall disabled due to external one
  networking.firewall.enable = false;

  # OpenSSH hardened defaults
  services.openssh = {
    enable = true;
  openFirewall = false;
    settings = {
      PasswordAuthentication = false;
      KbdInteractiveAuthentication = false;
      PermitRootLogin = "no";
      X11Forwarding = true;
      AllowTcpForwarding = "yes";
      AllowAgentForwarding = "yes";
      UseDns = false;
      Subsystem = "sftp /run/current-system/sw/lib/ssh/sftp-server";
      # modern key exchange/ciphers are used by default in recent NixOS
    };
  };

  # Restrict SSH access to your specified public key only (user scope)
  users.users.maicol07.openssh.authorizedKeys.keys = [
  "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIujyUjvzrsTC7MzvFJn5RK2pf4UyXUQQAoTlrjw+6i9"
  ];

  # Logrotate for traditional logs (journald is separate)
  services.logrotate.enable = true;

  # Docker daemon tuning for Swarm nodes
  virtualisation.docker.daemon.settings = {
    # limit container logs to avoid filling disk
    "log-driver" = "json-file";
    "log-opts" = {
      "max-size" = "10m";
      "max-file" = "3";
    };
    # DISABLE keep containers running across daemon restarts (needed for Swarm)
    "live-restore" = false;
  };

  # Auto-upgrade NixOS from this flake
  system.autoUpgrade = {
    enable = true;
    flake = "path:/etc/nixos";
    allowReboot = false; # set true if acceptable
    dates = "daily";
  };

  # Persistent journald with size cap
  services.journald.extraConfig = ''
    Storage=persistent
    SystemMaxUse=1G
  '';

  # NVIDIA drivers (server)
  hardware.graphics.enable = true;
  services.xserver.videoDrivers = [ "nvidia" ];
  hardware.nvidia = {
    modesetting.enable = true;
    open = true;
    nvidiaSettings = true;
    powerManagement.enable = false;
  };

  # Remote Desktop: switch from xrdp (X11) to krdp (Wayland RDP implementation for Plasma)
  # krdp provides RDP access to an existing Wayland Plasma session.
  # If you need fully headless auto-start, you can enable SDDM autologin below.
  environment.systemPackages = pkgs.lib.mkAfter [ pkgs.sbctl pkgs.kdePackages.krdp ];

  # Cockpit (web admin UI on port 9090)
  services.cockpit = {
    enable = true;
    settings = {
      WebService = {
        # AllowUnencrypted = true; # Allow unencrypted connections (optional)
        Origins = lib.mkForce "https://192.168.1.111:9090 wss://192.168.1.111:9090";
      };
    };
  };

  # Desktop environment: KDE Plasma (Wayland)
  services.xserver.enable = true; # still required for various input/video paths
  services.displayManager.sddm = {
    enable = true;
    wayland.enable = true;
    # Uncomment for headless login providing a live session for krdp:
    # autoLogin = {
    #   enable = true;
    #   user = "maicol07";
    # };
  };
  services.desktopManager.plasma6.enable = true;

  #
  # KDE Exclusions
  #
  environment.plasma6.excludePackages = with pkgs; [
    kdePackages.elisa # Simple music player aiming to provide a nice experience for its users
    kdePackages.kdepim-runtime # Akonadi agents and resources
    kdePackages.kmahjongg # KMahjongg is a tile matching game for one or two players
    kdePackages.kmines # KMines is the classic Minesweeper game
    kdePackages.konversation # User-friendly and fully-featured IRC client
    kdePackages.kpat # KPatience offers a selection of solitaire card games
    kdePackages.ksudoku # KSudoku is a logic-based symbol placement puzzle
    kdePackages.ktorrent # Powerful BitTorrent client
    mpv
  ];
}
